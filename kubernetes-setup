#!/bin/bash 
#
# Script to setup Kubernetes master & worker 
#
# author: Aldrin Baroi
# 
#

source lib/dependency-manager

readonly DISTRO=$(getDistroType)
case "${DISTRO}" in
	ubuntu|centos|redhat)
		:
		;;
	*)
		abort "[${DISTRO}] not yet supported"
		;;
esac

readonly CURRENT_DIR="$(pwd)"

readonly DEFAULT_KNODE_NAME="$(hostname)"
readonly DEFAULT_SERVICE_ACCOUNT="kubernetes-admin"
readonly DEFAULT_CLUSTER_NAME="kubernetes"
readonly DEFAULT_CONTEXT_NAME="${DEFAULT_SERVICE_ACCOUNT}@${DEFAULT_CLUSTER_NAME}"

readonly PREREQUISTE_PACKAGES="openssh-server socat"
readonly NET_FILTER_MODULE_NAME="br_netfilter"
readonly SETUP_CONFIG_FILE="kubernetes-setup.conf"
readonly KWORKER_CLUSTER_JOIN_COMMNAD_FILE="kworker-cluster-join-command"
readonly KDASHBOARD_LOGIN_INFO_FILE="kubernetes-dashboard-login.info" 
readonly KDASHBOARD_NAMESPACE="kubernetes-dashboard"

readonly TRUE=1
readonly FALSE=0
readonly ERROR=1
readonly OK=0 

KADMIN_USER="notset"
KADMIN_USER_GROUP="notset"
KADMIN_USER_HOME="notset"
KNODE_TYPE="noset"
KNODE_NAME="${DEFAULT_KNODE_NAME}"
KNODE_IFACE=""
KNODE_IP=""
KMASTER_NODE="notset"
KWORKER_NODES="notset"

KADMIN_SERVICE_ACCOUNT=
CLUSTER_NAME=
CONTEXT_NAME=
KUBECONFIG_FILE=

SETUP_DASHBOARD=${FALSE}

nodeType=""
nodeUser=""
REINSTALL=${FALSE}

showUsage()
{
        local msg=$1
        if [ ! -z "$msg" ]; then
                echo " "
                echo "${msg}"
                echo " "
        fi
        echo " "
        echo "kubernetes-setup usage:"
        echo " "
	echo "  kubernetes-setup -b [-s] | -j | [-s|-r] SETUP_OPTIONS | -h"
        echo " "
	echo "    -b      Get dashboard URL & login token"
	echo "            -s Setup dashboard & dashboard URL & login token"
	echo "    -j      Get worker node's cluster join command"
	echo "    -s|-r   Setup/reinstall Kubernetes node (master|worker)"
        echo "    -h      Show this usage text"
        echo " "
        echo "    SETUP_OPTIONS: -t node-type [-n node-name] [-i node-iface -a node-ip] [-c] [-d log-dir]"
        echo " "
        echo "      -t node-type    Kubernetes node type [master|worker]"
	echo "      -n node-name    Kubernetes node's host name (override config file)"
	echo "      -i node-iface   Kubernetes node's network interface name (changes node's IP address)"
	echo "      -a node-ip      IP address & netmask  Ex:  172.16.0.2/255.255.0.0"
	echo "      -c              Setup dashboard. Only applies to master node. By default dashboard is not setup"
	echo "      -d log-dir      Overrides default log directory" 
        echo " "
}

exeCmd_asAdminUser()
{
	local cmd=$1
	local errorMsg=$2
	local successMsg=$3
	exeCmd_asUser "${KADMIN_USER}" "${cmd}" "${errorMsg}" "${successMsg}"
} 

load_setup_configuration()
{
	if [ ! -f "${SETUP_CONFIG_FILE}" ]; then
		abort "Setup configration file [${SETUP_CONFIG_FILE}] not found in the current directory."
	fi
	source ${SETUP_CONFIG_FILE} > /dev/null 2>&1
	if (( $? )); then
		abort "Failed to load setup configuration from [${SETUP_CONFIG_FILE}] file"
	fi
	KADMIN_SERVICE_ACCOUNT=${KADMIN_SERVICE_ACCOUNT:-${DEFAULT_SERVICE_ACCOUNT}}
	CLUSTER_NAME=${CLUSTER_NAME:-${DEFAULT_CLUSTER_NAME}}
	CONTEXT_NAME=${KADMIN_SERVICE_ACCOUNT}@${CLUSTER_NAME}
	KUBECONFIG_FILE=${CONTEXT_NAME}.kubeconfig
} 

prepare_system__set_hostname()
{
	if [[ ! -z "${KNODE_NAME}" ]]; then
		log "Changing & setting host name to ${KNODE_NAME}..."
		exeCmd "hostnamectl set-hostname ${KNODE_NAME}"
	fi
}

prepare_system__set_ip_address()
{
	local ipAddress
	local netmask
	local ifcfgFile="/etc/sysconfig/network-scripts/ifcfg-${KNODE_IFACE}"
	if [[ ! -z "${KNODE_IFACE}" ]] && [[ ! -z "${KNODE_IP}" ]]; then
		log "Changing & setting IP address & netmask..."
		ipAddress=$(echo ${KNODE_IP} | awk 'BEGIN {FS="/"}; {print $1}')
		netmask=$(echo ${KNODE_IP} | awk 'BEGIN {FS="/"}; {print $2}')
		if [[ ! -z "${ipAddress}" ]] && [[ ! -z "${netmask}" ]]; then
			exeCmd "sed -i 's/IPADDR=.*/IPADDR=${ipAddress}/; s/NETMASK=.*/NETMASK=${netmask}/' ${ifcfgFile}"
			exeCmd "systemctl restart network"
		else
			abort "Error: both ip address & netmask need to be provided. Ex:  IP_ADDRESS/NET_MASKa 172.16.0.2/255.255.0.0"
		fi
	fi
}

prepare_system__set_selinux_permissive()
{
	log " "
	log "Setting SELinux system to permissive mode..." 
	if (( $(isSelinuxPermissive) )); then
		log "SELinux system is already set to permissive."
	else
		exeFunc "setSelinuxPermissive" \
			"Failed to set SELinux to permissive" \
			"Successfully set SELinux to permissive"
	fi
}

prepare_system__enable_bridge_network()
{
	log " "
	log "Enabling bridge network... "
	log "  Setting up to load netfilter module automatically..."
	cat <<-EOF > /etc/modules-load.d/kubernetes.conf
		${NET_FILTER_MODULE_NAME}
		EOF
	log "  Loading netfilter module..."
	exeCmd "modprobe br_netfilter > /dev/null 2>&1" 
	exeCmd "sleep 5"

	log " "
	log "  Enabling bridge network routing & ip forwarding..."
	cat <<-EOF > /usr/lib/sysctl.d/99-zz_kubernetes.conf
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
		net.ipv4.ip_forward = 1
		EOF
	exeCmd "sysctl --system > /dev/null 2>&1"
	exeCmd "sleep 5"
}

prepare_system__disable_swap_space()
{
	log " "
	log "Disabling swap space..."
	if (( $(isSwapEnabled) )); then
		log "Swap sapace is enabled. Disabling it..."
		exeFunc "disableSwap" \
			 "Failed to disable swap space" \
			 "Successfully disabled swap space"
	else
		log "Swap space is already disabled"
	fi
}

prepare_system__disable_firewall()
{
	log " "
	log "Disabling firewall service..."
	if (( $(isFirewallEnabled) )); then
		if (( $(isFirewallActive) )); then
			log "Firewall service is running."
			log "Stopping firewall service..."
			exeFunc "stopFirewall" \
				"Failed to stop firewall service. Cannot disable." \
				"Successfully stopped firewall"
		fi
		exeFunc "disableFirewall" \
			"Failed to disable firewall" \
			"Successfully disabled firewall"
	else
		log "Firewall is already disabled"
	fi
}

prepare_system__install_required_tools()
{
	log " "
	log "Installing required tool [jq]..."
	if [[ "${DISTRO}" != "ubuntu" ]]; then
		packageManager_install_ext "epel-release"
	fi
	packageManager_install_ext "jq"
	log " "
	log "Installing tool [ifconfig]..."
}

prepare_system__update_hosts_file()
{
	log " "
	log "Updating [/etc/hosts] file with k8s master & worker node names..."
	local hostName
	local hostShortName
	local hostIp
	local hostEntry
	local hostFile="/etc/hosts"
	local tempHostFile="/tmp/hosts"
	local preK8sSetupHostFile="/etc/hosts.pre-kubernetes-setup"
	if [ -f /etc/hosts.pre-kubernetes-setup ]; then
		exeCmd "cp ${preK8sSetupHostFile} ${hostFile}"
	else
		exeCmd "cp ${hostFile} ${preK8sSetupHostFile}"
	fi
	echo -e "#"
	echo -e "# <kubernetes-setup>"
	echo -e "#"
	echo -e "#   Added by kubernetes-setup script on $(date)>"  > ${tempHostFile}
	echo -e "#"
	log "KNODES = ${KNODES}"
	for node in $(echo ${KNODES} | jq -cr '.[]'); do
		hostName=$(echo ${node} | jq -r ".name")
		if (( $? )); then abort "Failed to get node's host name"; fi
		hostShortName=$(echo ${hostName} | awk 'BEGIN { FS="." }; {print $1}')
		if (( $? )); then abort "failed to get node's host short name"; fi
		hostIp=$(echo ${node} | jq -r ".ipAddress")
		if (( $? )); then abort "failed to get node's ip address"; fi
		hostEntry="${hostIp}\t${hostName}\t${hostShortName}" 
		log "${hostEntry}"
		echo -e ${hostEntry} >> ${tempHostFile}
	done 
	echo -e "#"
	echo -e '#</kubernetes-setup>'  >> ${tempHostFile}
	echo -e "#"
	cat ${tempHostFile} >> ${hostFile}
}

prepare_system__add_admin_user()
{
	log ""
	log "Adding K8S admin user:[${KADMIN_USER}]..."
	if (( $(addUser "${KADMIN_USER}" "${KADMIN_PASSWORD}") )); then
		KADMIN_USER_GROUP=${KADMIN_USER}
		KADMIN_USER_HOME=$(getUserHome "${KADMIN_USER}")
		log "Successfully added Kubernetes admin user"
	else
		log "ERROR CODE: $?"
		abort "Failed to add Kubernetes admin user"
	fi
}

prepare_system__update_installed_packages()
{
	log "Updating already installed pacakges to the latest release."
	packageManager_update_ext
}

prepare_system()
{
	log " "
	log "Preparing the system..." 
	prepare_system__set_hostname
	prepare_system__set_ip_address
	if [[ "${DISTRO}" == "ubuntu" ]]; then
		log "Disabling AppArmor..."
		exeCmd "stopService apparmor"
		exeCmd "disableService apparmor"
		log "Successfully disabled AppArmor"
	else
		prepare_system__set_selinux_permissive
	fi
	prepare_system__enable_bridge_network
	prepare_system__disable_swap_space
	prepare_system__disable_firewall
	prepare_system__install_required_tools
	prepare_system__update_hosts_file
	prepare_system__add_admin_user
	prepare_system__update_installed_packages
} 

install_prerequisite_packages()
{
	log " "
	log "Installing prerequisite packages"
	packageManager_install_ext "${PREREQUISTE_PACKAGES}" 
}

setup_kubernetes_repository()
{
	log " "
	log "Setting up kubernetes repository..."
	case "${DISTRO}" in
		ubuntu)
			exeCmd "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - "
			cat <<-EOF > /etc/apt/sources.list.d/kubernetes.list
				deb https://apt.kubernetes.io/ kubernetes-xenial main
			EOF
			(( $? )) && abort "Failed to add kubernetes repository"
			;;
		centos|redhat)
			cat <<-EOF > /etc/yum.repos.d/kubernetes.repo
				[kubernetes]
				name=Kubernetes
				baseurl=${KUBERNETES_REPO_URL}
				enabled=1
				gpgcheck=1
				repo_gpgcheck=1
				gpgkey=${KUBERNETES_REPO_GPG_KEY_URLS}
			EOF
			(( $? )) && abort "Failed to add kubernetes repository"
			;;
	esac
	packageManager_update_ext
} 

install_kubeadm_kubelet_kubectl()
{
	log "Installing kubeadm, kubelet, kubectl.."
	if [[ "${DISTRO}" == "ubuntu" ]]; then
		packageManager_install_ext "kubelet kubeadm kubectl"
	else
		packageManager_install_ext "kubelet kubeadm kubectl --disableexcludes=kubernetes"
	fi
	packageManager_update_ext
	log "Enabling kubelet..."
	exeFunc "enableService kubelet" "Failed to enable kubelet service" "Successfully enabled service"
}

start_kubelet()
{
	log "Starting kubelet..."
	exeFunc "startService kubelet" "Failed to start kubelet service" \
		"Successfully started kubelet service"
	log "Waiting for kubelet service to be active..."
	waitForServiceToBeActive kubelet 10 5
	if (( $? )); then
		abort "Kubelet failed to start within specified time limit."
	else
		log "Kubelet service started."
	fi 
}

log_start_setup()
{
	log "Kubernetes ${KNODE_TYPE} node setup started."
} 

log_end_setup()
{
	log " " 
	log "Kubernetes ${KNODE_TYPE} node setup completed."
}

setup_common_items()
{
	log "Setting up common items..."
	if (( ${REINSTALL} == ${TRUE} )); then
		prepare_system__add_admin_user
	else
		setup_kubernetes_repository
		prepare_system
		install_prerequisite_packages
		log " "
		log "Installing & starting container runtime..."
		containerRuntime_install ${CONTAINER_RUNTIME}
	fi
	install_kubeadm_kubelet_kubectl
}

setup_dashboard()
{
	log "Setting up Kubernetes dashboard"
	exeCmd_asAdminUser "kubectl create -f ${KUBERNETES_DASHBOARD_YAML_URL}"

	log "Exposing dashboard on NodePort..."
	exeCmd_asAdminUser "kubectl patch svc kubernetes-dashboard --type=json -p "'"[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]"'" --namespace=${KDASHBOARD_NAMESPACE}"
}

get_dashboard_url_and_login_token()
{
	log " "
	log "Getting kubernetes dashboard login url & token..."
	local tmpFile="/tmp/${KDASHBOARD_LOGIN_INFO_FILE}"
	cat /dev/null > ${tmpFile}
	chmod 666 ${tmpFile}
	echo "#" > ${tmpFile}
	echo "# Kubernetes dashboard URL and login token" >> ${tmpFile}
	echo "#" >> ${tmpFile}
	echo " " >> ${tmpFile}
	log " "
	exeCmd_asAdminUser "k8sdbp=\$(kubectl -n ${KDASHBOARD_NAMESPACE} get service kubernetes-dashboard --no-headers | awk "'"{print \$5}"'" | sed -r "'"s/(.*[:])([0-9]+)([/].*)/\\2/"'"); echo \"The dashboard can be accessed at https://${KMASTER_IP_ADDRESS}:\${k8sdbp}\" | tee -a ${tmpFile}"
	echo " " >> ${tmpFile} 
	log " "
	exeCmd_asAdminUser "dblt=\$(kubectl get secret \$(kubectl get serviceaccount ${KADMIN_SERVICE_ACCOUNT} -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode); echo \"Dashboard login token: \${dblt}\" | tee -a ${tmpFile}"
	cat ${tmpFile} > ${KDASHBOARD_LOGIN_INFO_FILE} 
	rm -f ${tmpFile} > /dev/null 
	log " "
	log "Kubernetes dashboard URL and login token has been saved in ${KDASHBOARD_LOGIN_INFO_FILE} file"
	log " "
}

generate_worker_node_cluster_join_command()
{
	cat /dev/null > ${KWORKER_CLUSTER_JOIN_COMMNAD_FILE}
	log " "
	log "Generating worker node's cluster join command..."
	log "Worker node's cluster join command:\n"
	exeCmd "kworkerJoinCmd=\$(kubeadm token create --print-join-command); echo \${kworkerJoinCmd} | tee ${KWORKER_CLUSTER_JOIN_COMMNAD_FILE}"
	log "\nThe join command has been saved in the ${KWORKER_CLUSTER_JOIN_COMMNAD_FILE} file"
	log "Please copy this file over to the worker node before running Kubernetes worker node setup script."
}

worker_node__join_cluster()
{
	log "Executing cluster join command..."
	local clusterJoinCmdFile="${CURRENT_DIR}/${KWORKER_CLUSTER_JOIN_COMMNAD_FILE}"
	exeCmd "bash ${clusterJoinCmdFile}; if (( \$? )); then echo 'Failed to join the cluster'; else echo 'Successfully joined the cluster'; fi"
}

read_data()
{
	local dataFile=${1}
	read line < ${dataFile}
	echo ${line} 
}

read_file()
{
        local dataFile=${1}
        local line
        local fileData=""
        while read line; do
                fileData+="${line}\n"
        done < ${dataFile}
        echo ${fileData}
} 

generate_kubeconfig_file()
{
	local KADMIN_SERVICE_ACCOUNT_SECRET_NAME=""
	local KADMIN_SERVICE_ACCOUNT_CERTIFICATE=""
	local KADMIN_SERVICE_ACCOUNT_TOKEN=""
        local KUBECONFIG_DATA_FILE=/tmp/kubeconfig_data  

	# Generate service account login "kubeconfig" file
	log " "
	log "Generating service account [${KADMIN_SERVICE_ACCOUNT}] kubeconfig file: ${KUBECONFIG_FILE} ..."
	sleep 3
	log "Getting service account secret name..."
	exeCmd_asAdminUser "kubectl get serviceaccount ${KADMIN_SERVICE_ACCOUNT} -n default -o jsonpath='{.secrets[0].name}' > ${KUBECONFIG_DATA_FILE}" \
			   "Failed to get service account secret key name" 
	KADMIN_SERVICE_ACCOUNT_SECRET_NAME=$(read_data ${KUBECONFIG_DATA_FILE}) 
	log "Getting service account certificate & token..."
	exeCmd_asAdminUser "kubectl get secret ${KADMIN_SERVICE_ACCOUNT_SECRET_NAME} -n default -o json > ${KUBECONFIG_DATA_FILE}" \
			   "Failed to get service account certificate & token"
	KADMIN_SERVICE_ACCOUNT_CERTIFICATE=$(cat ${KUBECONFIG_DATA_FILE} | jq -cr .data.\"ca.crt\")
	KADMIN_SERVICE_ACCOUNT_TOKEN=$(cat ${KUBECONFIG_DATA_FILE} | jq -cr .data.token | base64 --decode) 
	rm -f ${KUBECONFIG_DATA_FILE} > /dev/null 2>&1

	cat <<-EOF > ${KUBECONFIG_FILE}
	apiVersion: v1
	kind: Config
	clusters:
	  - cluster:
	      certificate-authority-data: ${KADMIN_SERVICE_ACCOUNT_CERTIFICATE}
	      server: https://${KMASTER_IP_ADDRESS}
	    name: ${CLUSTER_NAME}
	contexts:
	  - context:
	      cluster: ${CLUSTER_NAME}
	      namespace: default
	      user: ${KADMIN_SERVICE_ACCOUNT}
	    name: ${CONTEXT_NAME}
	current-context: ${CONTEXT_NAME}
	users:
	  - name: ${KADMIN_SERVICE_ACCOUNT}
	    user:
	      token: ${KADMIN_SERVICE_ACCOUNT_TOKEN}
	EOF
}

setup_master_node()
{
	log_start_setup 
	setup_common_items

	log " "
	log "Initiating cluster..."
	exeCmd "kubeadm init --pod-network-cidr=${CONTAINER_NETWORKING_CIDR} --apiserver-advertise-address=${KMASTER_IP_ADDRESS}" 
	log " "
	log "Setting up KADMIN_USER (${KADMIN_USER}) environment to be able to use kubectl command"
	exeCmd_asAdminUser "mkdir -p ${KADMIN_USER_HOME}/.kube"
	exeCmd "cp /etc/kubernetes/admin.conf ${KADMIN_USER_HOME}/.kube/config"
	exeCmd "chown -R ${KADMIN_USER}:${KADMIN_USER_GROUP} /home/${KADMIN_USER}/.kube/config" 
	log " "
	log "Creating service account [${KADMIN_SERVICE_ACCOUNT}]..."
	exeCmd_asAdminUser "kubectl create serviceaccount ${KADMIN_SERVICE_ACCOUNT} -n default"
	log "Adding cluster admin role binding rule..."
	exeCmd_asAdminUser "kubectl create clusterrolebinding cluster-admin-role -n default --clusterrole=cluster-admin --serviceaccount=default:${KADMIN_SERVICE_ACCOUNT}" 
	log " "
	log "Generating kubeconfig file..."
	generate_kubeconfig_file 
	log " "
	log "Setting up container networking. Type: ${CONTAINER_NETWORKING_TYPE}"
	containerNetworking_install ${CONTAINER_NETWORKING_TYPE}
	log "Starting kubelet..."
	start_kubelet 
	if (( ${SETUP_DASHBOARD} == ${TRUE} )); then
		setup_dashboard
		get_dashboard_url_and_login_token
	fi
	generate_worker_node_cluster_join_command 
	log_end_setup 
} 

get_worker_node_cluster_join_command()
{
	if [ ! -f ${KWORKER_CLUSTER_JOIN_COMMNAD_FILE} ]; then
		clear
		log " "
		log "Worker node's cluster join command file not found."
		#log "Trying to copy the file from master node..."
		if [[ "${DISTRO}" == "ubuntu" ]]; then
			: ## TODO Implement	
			abort "Auto copy of join command file not yet implemented.  Please copy the file & restart the install"
		else
			log "Trying to copy the file from master node..."
			exeCmd "scp root@${KMASTER_IP_ADDRESS}:/root/${KWORKER_CLUSTER_JOIN_COMMNAD_FILE} ."
		fi
		if (( $? )); then
			abort "Failed to copy the salve node's cluster join command file from the master node."
		fi
	fi
}

setup_worker_node()
{
	log_start_setup 
	get_worker_node_cluster_join_command
	setup_common_items
	if (( ${REINSTALL} == ${TRUE} )); then
		log "Restting this worker node & removing prior cluster settings..."
		exeCmd "kubeadm reset -f" \
			"Failed to reset. This node may not be able to join cluster." \
			"Sucessfully reset this node & removed prior cluster settings."
	fi
	worker_node__join_cluster 
	start_kubelet
	log_end_setup 
}

prepare_for_reinstall()
{
	log "Stopping kubelet..."
	exeFunc "stopService kubelet" \ "Failed to stop kubelete service" \
		"Successfully stopped kubelet service"
	waitForServiceToBeInactive "kubelet" 5 3
	if (( $? )); then 
		abort "Kubelet service did not stop within alloted time."
	fi
	log "Removing kubenetes..."
	packageManager_uninstall_ext "kubelet kubeadm kubectl" 
	log "Stopping all kubernetes processes..."
	[[ $(pgrep "master") ]]    && exeCmd 'pkill master'
	[[ $(pgrep "kubelet") ]]   && exeCmd 'pkill kubelet'
	[[ $(pgrep "kube-api") ]]  && exeCmd 'pkill "kube-api*"'
	[[ $(pgrep "etcd") ]]      && exeCmd 'pkill etcd'

	log " "
	log "Preparing container runtime  for reinstall..."
	containerRuntime_prepare_for_reinstall ${CONTAINER_RUNTIME}

	log "Unmounting all kubenetes tmpfs mounts..."
	if [[ $(mount -l -t tmpfs | grep kube | wc -l) > 0 ]]; then
		exeCmd 'mount -l -t tmpfs | grep kube | awk '"'"'{print $3}'"'"' | xargs -l umount -t tmpfs'
	else
		log "  No tmpfs mount to unmount"
	fi
	log "Removing all kubernetes config and other files & temporary mount points..."
	exeCmd 'rm -rf /etc/kubernetes'
	exeCmd 'rm -rf /var/lib/etcd'
	exeCmd 'rm -rf /var/lib/kube*'
}

# __main__ 

enableLogging
readonly OPTIONS=":bjsrt:n:i:a:cd:h"
getopts "${OPTIONS}" opt ${@}
case $opt in
	b)
		getopts "s" opt ${@}
		case $opt in
			s)
	       			load_setup_configuration
				setup_dashboard
				get_dashboard_url_and_login_token
				;;
			*)
				disableLogging
	       			load_setup_configuration
				get_dashboard_url_and_login_token
				;;
		esac
		;;
	j)
		disableLogging
	       	load_setup_configuration
		generate_worker_node_cluster_join_command
		;;
	r|s)
	       	load_setup_configuration
		if [[ "${opt}" == "r" ]]; then
			REINSTALL=${TRUE}
		fi
		nodeType=""
		nodeUser=""
                while getopts "${OPTIONS}" opt ${@}; do
                        case $opt in
                                t)
                                        nodeType=${OPTARG}
                                        ;;
                                n)
                                        nodeName=${OPTARG}
                                        ;;
                                i)
                                        nodeIface=${OPTARG}
                                        ;;
                                a)
                                        nodeIp=${OPTARG}
                                        ;;
                                c)
                                        SETUP_DASHBOARD=${TRUE}
                                        ;;
                                d)
                                        logDir=${OPTARG}
                                        ;;
				*)
					showUsage "Invalid option(s) provided"
                        esac
                done 
		KNODE_TYPE=${nodeType}
		if [[ ! -z "${nodeName}" ]]; then
			KNODE_NAME=${nodeName}
		fi
		if [[ ! -z "${nodeIface}" ]]; then
			KNODE_IFACE=${nodeIface}
		fi
		if [[ ! -z "${nodeIp}" ]]; then
			KNODE_IP=${nodeIp}
		fi
		if [[ ! -z "${nodeUser}" ]]; then
			KADMIN_USER=${nodeUser}
		fi
		setLogTag "K8S ${KNODE_TYPE} Setup"
		setLogDirectory "${logDir:-$(pwd)}" 
		setLogFileName "setup-k8s-${KNODE_TYPE}.log" 
		newLogFile
		if (( ${REINSTALL} == ${TRUE} )); then
			prepare_for_reinstall
		fi
		case $nodeType in 
			master)
				setup_master_node
				;;
			worker)
				setup_worker_node
				;;
			*)
				showUsage "Invalid node type: ${nodeType}"
				;;
		esac
		;;
        h|*)
                showUsage
                ;;
esac 

#::END::

